---
import Layout from "../../layouts/Layout.astro";
import ThemeButton from "../../components/ThemeToggle";
import BlogView from "../../components/BlogView.astro";
import { getSession } from "auth-astro/server";
import PageNavButtons from "@components/PageNavButtons.astro";
import {
    upsertUserEntry,
    fetchAllPostsForUser,
    fetchAllPosts,
} from "../../../aws/backend/db/query";

const { page } = Astro.params;

// Get session and userEmail. Redirect to login if session is expired
const session = await getSession(Astro.request);

if (session && Date.parse(session.expires) < Date.now()) {
    return Astro.redirect("/login");
}
const userEmail = session?.user?.email || undefined;
const userName = session?.user?.name || undefined;

// Upsert user with async request only on first page
async function upsertUser(email: string, userName: string) {
    try {
        await upsertUserEntry({ email, username: userName });
    } catch (err) {
        console.log(err);
        return new Response(
            JSON.stringify({
                message: "some error happened",
            }),
        );
    }
}

if (Number(page) === 1) {
    userEmail && userName && (await upsertUser(userEmail, userName));
}

// Fetch posts for page
async function fetchPostsForPage(page: number, userEmail?: string) {
    const limit = 10;
    const offset = (page - 1) * limit;

    return userEmail
        ? await fetchAllPostsForUser({ userEmail, offset, limit })
        : await fetchAllPosts({ offset, limit });
}

// Page logic
const pageNumber = Number(page);
const prevPage = pageNumber !== 1 ? pageNumber - 1 : 1;
const posts = await fetchPostsForPage(pageNumber, userEmail);
const nextPage = posts.length > 1 ? pageNumber + 1 : pageNumber;
---

<Layout title="Engineering blogs">
    <main>
        <div class="text-center">
            <ThemeButton client:only />
        </div>
        <div class="items-center text-center p-5">
            <div>
                <h1 class="text-xl font-extrabold p-2">Latest posts</h1>
            </div>
            <div class="mt-5">
                {
                    posts.length > 1 && (
                        <PageNavButtons
                            prevPage={prevPage}
                            nextPage={nextPage}
                        />
                    )
                }
            </div>
            {
                posts.length > 1 ? (
                    posts.map((p: any) => {
                        return <BlogView blog={p} />;
                    })
                ) : (
                    <div class="text-lg p-10">No posts to show...</div>
                )
            }
        </div>
        <div class="p-5 mb-5">
            {
                posts.length > 1 && (
                    <PageNavButtons prevPage={prevPage} nextPage={nextPage} />
                )
            }
        </div>
    </main>
</Layout>
